functor PlcParserLrValsFun(structure Token : TOKEN)
 : sig structure ParserData : PARSER_DATA
       structure Tokens : PlcParser_TOKENS
   end
 = 
struct
structure ParserData=
struct
structure Header = 
struct
datatype declaration = Variable       of string * expr
                  | Function          of string * expr
                  | RecursiveFunction of string * (plcType * string) list * plcType * expr

fun resolve (decl, prog) =
    case decl of  Variable v           => Let (#1v, #2v, prog)
                | Function f           => Let (#1f, #2f, prog)
                | RecursiveFunction fr => makeFun (#1fr, #2fr, #3fr, #4fr, prog)

fun parserLog(msg) = TextIO.output(TextIO.stdOut, msg ^ "\n")




end
structure LrTable = Token.LrTable
structure Token = Token
local open LrTable in 
val table=let val actionRows =
"\
\\001\000\001\000\165\000\002\000\165\000\003\000\165\000\004\000\165\000\
\\005\000\165\000\006\000\165\000\007\000\165\000\008\000\165\000\
\\009\000\165\000\010\000\165\000\011\000\165\000\012\000\165\000\
\\014\000\165\000\015\000\165\000\018\000\165\000\021\000\165\000\
\\029\000\165\000\031\000\165\000\034\000\165\000\035\000\165\000\
\\036\000\165\000\037\000\165\000\039\000\165\000\040\000\165\000\
\\041\000\165\000\042\000\165\000\043\000\165\000\045\000\165\000\
\\046\000\165\000\000\000\
\\001\000\001\000\166\000\002\000\166\000\003\000\166\000\004\000\166\000\
\\005\000\166\000\006\000\166\000\007\000\166\000\008\000\166\000\
\\009\000\166\000\010\000\166\000\011\000\166\000\012\000\166\000\
\\014\000\166\000\015\000\166\000\018\000\166\000\021\000\166\000\
\\029\000\166\000\031\000\166\000\034\000\166\000\035\000\166\000\
\\036\000\166\000\037\000\166\000\039\000\166\000\040\000\166\000\
\\041\000\166\000\042\000\166\000\043\000\166\000\045\000\166\000\
\\046\000\166\000\000\000\
\\001\000\001\000\167\000\002\000\167\000\003\000\167\000\004\000\167\000\
\\005\000\167\000\006\000\167\000\007\000\167\000\008\000\167\000\
\\009\000\167\000\010\000\167\000\011\000\167\000\012\000\167\000\
\\014\000\167\000\015\000\167\000\018\000\167\000\021\000\167\000\
\\029\000\167\000\031\000\167\000\034\000\167\000\035\000\167\000\
\\036\000\167\000\037\000\167\000\039\000\167\000\040\000\167\000\
\\041\000\167\000\042\000\167\000\043\000\167\000\045\000\167\000\
\\046\000\167\000\000\000\
\\001\000\001\000\168\000\002\000\168\000\003\000\168\000\004\000\168\000\
\\005\000\168\000\006\000\168\000\007\000\168\000\008\000\168\000\
\\009\000\168\000\010\000\168\000\011\000\168\000\012\000\168\000\
\\014\000\168\000\015\000\168\000\018\000\168\000\021\000\168\000\
\\029\000\168\000\031\000\168\000\034\000\168\000\035\000\168\000\
\\036\000\168\000\037\000\168\000\039\000\168\000\040\000\168\000\
\\041\000\168\000\042\000\168\000\043\000\168\000\045\000\168\000\
\\046\000\168\000\000\000\
\\001\000\001\000\169\000\002\000\169\000\003\000\169\000\004\000\169\000\
\\005\000\169\000\006\000\169\000\007\000\169\000\008\000\169\000\
\\009\000\169\000\010\000\169\000\011\000\169\000\012\000\169\000\
\\014\000\169\000\015\000\169\000\018\000\169\000\021\000\169\000\
\\029\000\169\000\031\000\169\000\034\000\169\000\035\000\169\000\
\\036\000\169\000\037\000\169\000\039\000\169\000\040\000\169\000\
\\041\000\169\000\042\000\169\000\043\000\169\000\045\000\169\000\
\\046\000\169\000\000\000\
\\001\000\001\000\170\000\002\000\170\000\003\000\170\000\004\000\170\000\
\\005\000\170\000\006\000\170\000\007\000\170\000\008\000\170\000\
\\009\000\170\000\010\000\170\000\011\000\170\000\012\000\170\000\
\\014\000\170\000\015\000\170\000\018\000\170\000\021\000\170\000\
\\029\000\170\000\031\000\170\000\034\000\170\000\035\000\170\000\
\\036\000\170\000\037\000\170\000\039\000\170\000\040\000\170\000\
\\041\000\170\000\042\000\170\000\043\000\170\000\045\000\170\000\
\\046\000\170\000\000\000\
\\001\000\001\000\171\000\002\000\171\000\003\000\171\000\004\000\171\000\
\\005\000\171\000\006\000\171\000\007\000\171\000\008\000\171\000\
\\009\000\171\000\010\000\171\000\011\000\171\000\012\000\171\000\
\\014\000\171\000\015\000\171\000\018\000\171\000\021\000\171\000\
\\029\000\171\000\031\000\171\000\034\000\171\000\035\000\171\000\
\\036\000\171\000\037\000\171\000\039\000\171\000\040\000\171\000\
\\041\000\171\000\042\000\171\000\043\000\171\000\045\000\171\000\
\\046\000\171\000\000\000\
\\001\000\001\000\172\000\002\000\172\000\003\000\172\000\004\000\172\000\
\\005\000\172\000\006\000\172\000\007\000\172\000\008\000\172\000\
\\009\000\172\000\010\000\172\000\011\000\172\000\012\000\172\000\
\\014\000\172\000\015\000\172\000\018\000\172\000\021\000\172\000\
\\029\000\172\000\031\000\172\000\034\000\172\000\035\000\172\000\
\\036\000\172\000\037\000\172\000\039\000\172\000\040\000\172\000\
\\041\000\172\000\042\000\172\000\043\000\172\000\045\000\172\000\
\\046\000\172\000\000\000\
\\001\000\001\000\173\000\002\000\173\000\003\000\173\000\004\000\173\000\
\\005\000\173\000\006\000\173\000\007\000\173\000\008\000\173\000\
\\009\000\173\000\010\000\173\000\011\000\173\000\012\000\173\000\
\\014\000\173\000\015\000\173\000\018\000\173\000\021\000\173\000\
\\029\000\173\000\031\000\173\000\034\000\173\000\035\000\173\000\
\\036\000\173\000\037\000\173\000\039\000\173\000\040\000\173\000\
\\041\000\173\000\042\000\173\000\043\000\173\000\045\000\173\000\
\\046\000\173\000\000\000\
\\001\000\001\000\174\000\002\000\174\000\003\000\174\000\004\000\174\000\
\\005\000\174\000\006\000\174\000\007\000\174\000\008\000\174\000\
\\009\000\174\000\010\000\174\000\011\000\174\000\012\000\174\000\
\\014\000\174\000\015\000\174\000\018\000\174\000\021\000\174\000\
\\029\000\174\000\031\000\174\000\034\000\174\000\035\000\174\000\
\\036\000\174\000\037\000\174\000\039\000\174\000\040\000\174\000\
\\041\000\174\000\042\000\174\000\043\000\174\000\045\000\174\000\
\\046\000\174\000\000\000\
\\001\000\001\000\175\000\002\000\175\000\003\000\175\000\004\000\175\000\
\\005\000\175\000\006\000\175\000\007\000\175\000\008\000\175\000\
\\009\000\175\000\010\000\175\000\011\000\175\000\012\000\175\000\
\\014\000\175\000\015\000\175\000\018\000\175\000\021\000\175\000\
\\029\000\175\000\031\000\175\000\034\000\175\000\035\000\175\000\
\\036\000\175\000\037\000\175\000\039\000\175\000\040\000\175\000\
\\041\000\175\000\042\000\175\000\043\000\175\000\045\000\175\000\
\\046\000\175\000\000\000\
\\001\000\001\000\176\000\002\000\176\000\003\000\176\000\004\000\176\000\
\\005\000\176\000\006\000\176\000\007\000\176\000\008\000\176\000\
\\009\000\176\000\010\000\176\000\011\000\176\000\012\000\176\000\
\\014\000\176\000\015\000\176\000\018\000\176\000\021\000\176\000\
\\029\000\176\000\031\000\176\000\034\000\176\000\035\000\176\000\
\\036\000\176\000\037\000\176\000\039\000\176\000\040\000\176\000\
\\041\000\176\000\042\000\176\000\043\000\176\000\045\000\176\000\
\\046\000\176\000\000\000\
\\001\000\001\000\177\000\002\000\177\000\003\000\177\000\004\000\177\000\
\\005\000\177\000\006\000\177\000\007\000\177\000\008\000\177\000\
\\009\000\177\000\010\000\177\000\011\000\177\000\012\000\177\000\
\\014\000\177\000\015\000\177\000\018\000\177\000\021\000\177\000\
\\029\000\177\000\031\000\177\000\034\000\177\000\035\000\177\000\
\\036\000\177\000\037\000\177\000\039\000\177\000\040\000\177\000\
\\041\000\177\000\042\000\177\000\043\000\177\000\045\000\177\000\
\\046\000\177\000\000\000\
\\001\000\001\000\189\000\007\000\189\000\012\000\189\000\013\000\189\000\
\\015\000\189\000\035\000\189\000\037\000\189\000\000\000\
\\001\000\001\000\190\000\007\000\190\000\012\000\190\000\013\000\190\000\
\\015\000\190\000\035\000\190\000\037\000\190\000\000\000\
\\001\000\001\000\191\000\007\000\191\000\012\000\191\000\013\000\191\000\
\\015\000\191\000\035\000\191\000\037\000\091\000\000\000\
\\001\000\001\000\192\000\007\000\192\000\012\000\192\000\013\000\192\000\
\\015\000\192\000\035\000\192\000\037\000\192\000\000\000\
\\001\000\001\000\193\000\007\000\193\000\012\000\193\000\013\000\193\000\
\\015\000\193\000\035\000\193\000\037\000\193\000\000\000\
\\001\000\001\000\194\000\007\000\194\000\012\000\194\000\013\000\194\000\
\\015\000\194\000\035\000\194\000\037\000\194\000\000\000\
\\001\000\001\000\195\000\007\000\195\000\012\000\195\000\013\000\195\000\
\\015\000\195\000\035\000\195\000\037\000\195\000\000\000\
\\001\000\001\000\025\000\002\000\024\000\003\000\143\000\004\000\143\000\
\\005\000\143\000\006\000\143\000\007\000\143\000\008\000\022\000\
\\009\000\021\000\010\000\143\000\011\000\143\000\012\000\143\000\
\\014\000\020\000\015\000\143\000\018\000\017\000\021\000\143\000\
\\029\000\143\000\031\000\143\000\034\000\143\000\035\000\143\000\
\\036\000\143\000\037\000\143\000\039\000\143\000\040\000\010\000\
\\041\000\143\000\042\000\143\000\043\000\143\000\045\000\143\000\
\\046\000\143\000\000\000\
\\001\000\001\000\025\000\002\000\024\000\003\000\144\000\004\000\144\000\
\\005\000\144\000\006\000\144\000\007\000\144\000\008\000\022\000\
\\009\000\021\000\010\000\144\000\011\000\144\000\012\000\144\000\
\\014\000\020\000\015\000\144\000\018\000\017\000\021\000\144\000\
\\029\000\144\000\031\000\144\000\034\000\144\000\035\000\144\000\
\\036\000\144\000\037\000\144\000\039\000\144\000\040\000\010\000\
\\041\000\144\000\042\000\144\000\043\000\144\000\045\000\144\000\
\\046\000\144\000\000\000\
\\001\000\001\000\025\000\002\000\024\000\005\000\023\000\008\000\022\000\
\\009\000\021\000\012\000\063\000\014\000\062\000\015\000\061\000\
\\018\000\017\000\019\000\060\000\020\000\059\000\022\000\016\000\
\\023\000\015\000\024\000\014\000\025\000\013\000\026\000\058\000\
\\027\000\012\000\030\000\011\000\040\000\010\000\044\000\009\000\000\000\
\\001\000\001\000\025\000\002\000\024\000\005\000\023\000\008\000\022\000\
\\009\000\021\000\014\000\020\000\016\000\019\000\017\000\018\000\
\\018\000\017\000\022\000\016\000\023\000\015\000\024\000\014\000\
\\025\000\013\000\027\000\012\000\030\000\011\000\040\000\010\000\
\\044\000\009\000\000\000\
\\001\000\001\000\025\000\002\000\024\000\005\000\023\000\008\000\022\000\
\\009\000\021\000\014\000\020\000\018\000\017\000\022\000\016\000\
\\023\000\015\000\024\000\014\000\025\000\013\000\027\000\012\000\
\\030\000\011\000\032\000\120\000\040\000\010\000\044\000\009\000\000\000\
\\001\000\001\000\025\000\002\000\024\000\005\000\023\000\008\000\022\000\
\\009\000\021\000\014\000\020\000\018\000\017\000\022\000\016\000\
\\023\000\015\000\024\000\014\000\025\000\013\000\027\000\012\000\
\\030\000\011\000\040\000\010\000\044\000\009\000\000\000\
\\001\000\001\000\051\000\000\000\
\\001\000\001\000\053\000\028\000\052\000\000\000\
\\001\000\001\000\088\000\000\000\
\\001\000\001\000\105\000\037\000\091\000\000\000\
\\001\000\002\000\071\000\000\000\
\\001\000\003\000\146\000\004\000\146\000\005\000\146\000\006\000\146\000\
\\007\000\146\000\010\000\146\000\011\000\146\000\012\000\146\000\
\\015\000\146\000\021\000\146\000\029\000\146\000\031\000\146\000\
\\034\000\146\000\035\000\146\000\036\000\146\000\037\000\146\000\
\\039\000\146\000\041\000\146\000\042\000\146\000\043\000\146\000\
\\045\000\146\000\046\000\146\000\000\000\
\\001\000\003\000\147\000\004\000\147\000\005\000\147\000\006\000\147\000\
\\007\000\147\000\010\000\147\000\011\000\147\000\012\000\034\000\
\\015\000\147\000\021\000\147\000\029\000\147\000\031\000\147\000\
\\034\000\147\000\035\000\147\000\036\000\147\000\037\000\147\000\
\\039\000\147\000\041\000\147\000\042\000\147\000\043\000\147\000\
\\045\000\147\000\046\000\147\000\000\000\
\\001\000\003\000\148\000\004\000\039\000\005\000\148\000\006\000\037\000\
\\007\000\148\000\010\000\148\000\011\000\148\000\012\000\034\000\
\\015\000\148\000\021\000\148\000\029\000\148\000\031\000\148\000\
\\034\000\148\000\035\000\148\000\036\000\148\000\037\000\148\000\
\\039\000\148\000\041\000\148\000\042\000\148\000\043\000\148\000\
\\045\000\148\000\046\000\148\000\000\000\
\\001\000\003\000\149\000\004\000\149\000\005\000\149\000\006\000\149\000\
\\007\000\149\000\010\000\149\000\011\000\149\000\012\000\034\000\
\\015\000\149\000\021\000\149\000\029\000\149\000\031\000\149\000\
\\034\000\149\000\035\000\149\000\036\000\149\000\037\000\149\000\
\\039\000\149\000\041\000\149\000\042\000\149\000\043\000\149\000\
\\045\000\149\000\046\000\149\000\000\000\
\\001\000\003\000\150\000\004\000\150\000\005\000\150\000\006\000\150\000\
\\007\000\150\000\010\000\150\000\011\000\150\000\012\000\034\000\
\\015\000\150\000\021\000\150\000\029\000\150\000\031\000\150\000\
\\034\000\150\000\035\000\150\000\036\000\150\000\037\000\150\000\
\\039\000\150\000\041\000\150\000\042\000\150\000\043\000\150\000\
\\045\000\150\000\046\000\150\000\000\000\
\\001\000\003\000\151\000\004\000\151\000\005\000\151\000\006\000\151\000\
\\007\000\151\000\010\000\151\000\011\000\151\000\012\000\034\000\
\\015\000\151\000\021\000\151\000\029\000\151\000\031\000\151\000\
\\034\000\151\000\035\000\151\000\036\000\151\000\037\000\151\000\
\\039\000\151\000\041\000\151\000\042\000\151\000\043\000\151\000\
\\045\000\151\000\046\000\151\000\000\000\
\\001\000\003\000\152\000\004\000\152\000\005\000\152\000\006\000\152\000\
\\007\000\152\000\010\000\152\000\011\000\152\000\012\000\034\000\
\\015\000\152\000\021\000\152\000\029\000\152\000\031\000\152\000\
\\034\000\152\000\035\000\152\000\036\000\152\000\037\000\152\000\
\\039\000\152\000\041\000\152\000\042\000\152\000\043\000\152\000\
\\045\000\152\000\046\000\152\000\000\000\
\\001\000\003\000\154\000\004\000\039\000\005\000\154\000\006\000\037\000\
\\007\000\154\000\010\000\154\000\011\000\154\000\012\000\034\000\
\\015\000\154\000\021\000\154\000\029\000\154\000\031\000\154\000\
\\034\000\154\000\035\000\154\000\036\000\154\000\037\000\154\000\
\\039\000\154\000\041\000\154\000\042\000\154\000\043\000\154\000\
\\045\000\154\000\046\000\154\000\000\000\
\\001\000\003\000\155\000\004\000\039\000\005\000\155\000\006\000\037\000\
\\007\000\155\000\010\000\155\000\011\000\155\000\012\000\034\000\
\\015\000\155\000\021\000\155\000\029\000\155\000\031\000\155\000\
\\034\000\155\000\035\000\155\000\036\000\155\000\037\000\155\000\
\\039\000\155\000\041\000\155\000\042\000\155\000\043\000\155\000\
\\045\000\155\000\046\000\155\000\000\000\
\\001\000\003\000\156\000\004\000\156\000\005\000\156\000\006\000\156\000\
\\007\000\156\000\010\000\156\000\011\000\156\000\012\000\034\000\
\\015\000\156\000\021\000\156\000\029\000\156\000\031\000\156\000\
\\034\000\156\000\035\000\156\000\036\000\156\000\037\000\156\000\
\\039\000\156\000\041\000\156\000\042\000\156\000\043\000\156\000\
\\045\000\156\000\046\000\156\000\000\000\
\\001\000\003\000\157\000\004\000\157\000\005\000\157\000\006\000\157\000\
\\007\000\157\000\010\000\157\000\011\000\157\000\012\000\034\000\
\\015\000\157\000\021\000\157\000\029\000\157\000\031\000\157\000\
\\034\000\157\000\035\000\157\000\036\000\157\000\037\000\157\000\
\\039\000\157\000\041\000\157\000\042\000\157\000\043\000\157\000\
\\045\000\157\000\046\000\157\000\000\000\
\\001\000\003\000\164\000\004\000\164\000\005\000\164\000\006\000\164\000\
\\007\000\164\000\010\000\164\000\011\000\164\000\012\000\164\000\
\\015\000\164\000\021\000\164\000\029\000\164\000\031\000\164\000\
\\034\000\164\000\035\000\164\000\036\000\164\000\037\000\164\000\
\\039\000\164\000\041\000\164\000\042\000\164\000\043\000\164\000\
\\045\000\164\000\046\000\164\000\000\000\
\\001\000\003\000\180\000\004\000\180\000\005\000\180\000\006\000\180\000\
\\007\000\180\000\010\000\180\000\011\000\180\000\012\000\180\000\
\\015\000\180\000\021\000\180\000\029\000\180\000\031\000\180\000\
\\034\000\180\000\035\000\180\000\036\000\180\000\037\000\180\000\
\\039\000\180\000\041\000\180\000\042\000\180\000\043\000\180\000\
\\045\000\180\000\046\000\180\000\000\000\
\\001\000\003\000\181\000\004\000\181\000\005\000\181\000\006\000\181\000\
\\007\000\181\000\010\000\181\000\011\000\181\000\012\000\181\000\
\\015\000\181\000\021\000\181\000\029\000\181\000\031\000\181\000\
\\034\000\181\000\035\000\181\000\036\000\181\000\037\000\181\000\
\\039\000\181\000\041\000\181\000\042\000\181\000\043\000\181\000\
\\045\000\181\000\046\000\181\000\000\000\
\\001\000\003\000\040\000\004\000\039\000\005\000\038\000\006\000\037\000\
\\007\000\158\000\010\000\158\000\011\000\158\000\012\000\034\000\
\\015\000\158\000\021\000\158\000\029\000\158\000\031\000\158\000\
\\034\000\033\000\035\000\158\000\036\000\158\000\037\000\158\000\
\\039\000\032\000\041\000\158\000\042\000\158\000\043\000\030\000\
\\045\000\158\000\046\000\158\000\000\000\
\\001\000\003\000\040\000\004\000\039\000\005\000\038\000\006\000\037\000\
\\007\000\159\000\010\000\159\000\011\000\159\000\012\000\034\000\
\\015\000\159\000\021\000\159\000\029\000\159\000\031\000\159\000\
\\034\000\033\000\035\000\159\000\036\000\159\000\037\000\159\000\
\\039\000\032\000\041\000\159\000\042\000\159\000\043\000\030\000\
\\045\000\159\000\046\000\159\000\000\000\
\\001\000\003\000\040\000\004\000\039\000\005\000\038\000\006\000\037\000\
\\007\000\160\000\010\000\160\000\011\000\160\000\012\000\034\000\
\\015\000\160\000\021\000\160\000\029\000\160\000\031\000\160\000\
\\034\000\033\000\035\000\160\000\036\000\160\000\037\000\160\000\
\\039\000\160\000\041\000\160\000\042\000\160\000\043\000\160\000\
\\045\000\160\000\046\000\160\000\000\000\
\\001\000\003\000\040\000\004\000\039\000\005\000\038\000\006\000\037\000\
\\007\000\161\000\010\000\161\000\011\000\161\000\012\000\034\000\
\\015\000\161\000\021\000\161\000\029\000\161\000\031\000\161\000\
\\034\000\033\000\035\000\161\000\036\000\161\000\037\000\161\000\
\\039\000\161\000\041\000\161\000\042\000\161\000\043\000\161\000\
\\045\000\161\000\046\000\161\000\000\000\
\\001\000\003\000\040\000\004\000\039\000\005\000\038\000\006\000\037\000\
\\007\000\162\000\010\000\162\000\011\000\162\000\012\000\034\000\
\\015\000\162\000\021\000\162\000\029\000\162\000\031\000\162\000\
\\034\000\033\000\035\000\162\000\036\000\162\000\037\000\162\000\
\\039\000\162\000\041\000\162\000\042\000\162\000\043\000\162\000\
\\045\000\162\000\046\000\162\000\000\000\
\\001\000\003\000\040\000\004\000\039\000\005\000\038\000\006\000\037\000\
\\007\000\036\000\010\000\140\000\012\000\034\000\034\000\033\000\
\\039\000\032\000\042\000\031\000\043\000\030\000\045\000\029\000\000\000\
\\001\000\003\000\040\000\004\000\039\000\005\000\038\000\006\000\037\000\
\\007\000\036\000\010\000\141\000\012\000\034\000\034\000\033\000\
\\039\000\032\000\042\000\031\000\043\000\030\000\045\000\029\000\000\000\
\\001\000\003\000\040\000\004\000\039\000\005\000\038\000\006\000\037\000\
\\007\000\036\000\010\000\142\000\012\000\034\000\034\000\033\000\
\\039\000\032\000\042\000\031\000\043\000\030\000\045\000\029\000\000\000\
\\001\000\003\000\040\000\004\000\039\000\005\000\038\000\006\000\037\000\
\\007\000\036\000\010\000\145\000\011\000\145\000\012\000\034\000\
\\015\000\145\000\021\000\145\000\029\000\145\000\031\000\145\000\
\\034\000\033\000\035\000\145\000\036\000\145\000\037\000\145\000\
\\039\000\032\000\041\000\145\000\042\000\031\000\043\000\030\000\
\\045\000\029\000\046\000\145\000\000\000\
\\001\000\003\000\040\000\004\000\039\000\005\000\038\000\006\000\037\000\
\\007\000\036\000\010\000\153\000\011\000\153\000\012\000\034\000\
\\015\000\153\000\021\000\153\000\029\000\153\000\031\000\153\000\
\\034\000\033\000\035\000\153\000\036\000\153\000\037\000\153\000\
\\039\000\032\000\041\000\153\000\042\000\153\000\043\000\030\000\
\\045\000\029\000\046\000\153\000\000\000\
\\001\000\003\000\040\000\004\000\039\000\005\000\038\000\006\000\037\000\
\\007\000\036\000\010\000\035\000\011\000\138\000\012\000\034\000\
\\034\000\033\000\039\000\032\000\041\000\138\000\042\000\031\000\
\\043\000\030\000\045\000\029\000\000\000\
\\001\000\003\000\040\000\004\000\039\000\005\000\038\000\006\000\037\000\
\\007\000\036\000\010\000\035\000\011\000\163\000\012\000\034\000\
\\015\000\163\000\021\000\163\000\029\000\163\000\031\000\163\000\
\\034\000\033\000\035\000\163\000\036\000\163\000\037\000\163\000\
\\039\000\032\000\041\000\163\000\042\000\031\000\043\000\030\000\
\\045\000\029\000\046\000\163\000\000\000\
\\001\000\003\000\040\000\004\000\039\000\005\000\038\000\006\000\037\000\
\\007\000\036\000\010\000\035\000\012\000\034\000\015\000\178\000\
\\034\000\033\000\035\000\093\000\039\000\032\000\042\000\031\000\
\\043\000\030\000\045\000\029\000\000\000\
\\001\000\003\000\040\000\004\000\039\000\005\000\038\000\006\000\037\000\
\\007\000\036\000\010\000\035\000\012\000\034\000\015\000\094\000\
\\034\000\033\000\035\000\093\000\039\000\032\000\042\000\031\000\
\\043\000\030\000\045\000\029\000\000\000\
\\001\000\003\000\040\000\004\000\039\000\005\000\038\000\006\000\037\000\
\\007\000\036\000\010\000\035\000\012\000\034\000\021\000\121\000\
\\034\000\033\000\039\000\032\000\042\000\031\000\043\000\030\000\
\\045\000\029\000\000\000\
\\001\000\003\000\040\000\004\000\039\000\005\000\038\000\006\000\037\000\
\\007\000\036\000\010\000\035\000\012\000\034\000\029\000\080\000\
\\034\000\033\000\039\000\032\000\042\000\031\000\043\000\030\000\
\\045\000\029\000\000\000\
\\001\000\003\000\040\000\004\000\039\000\005\000\038\000\006\000\037\000\
\\007\000\036\000\010\000\035\000\012\000\034\000\031\000\079\000\
\\034\000\033\000\039\000\032\000\042\000\031\000\043\000\030\000\
\\045\000\029\000\000\000\
\\001\000\003\000\040\000\004\000\039\000\005\000\038\000\006\000\037\000\
\\007\000\036\000\010\000\035\000\012\000\034\000\034\000\033\000\
\\036\000\101\000\039\000\032\000\042\000\031\000\043\000\030\000\
\\045\000\029\000\046\000\100\000\000\000\
\\001\000\003\000\040\000\004\000\039\000\005\000\038\000\006\000\037\000\
\\007\000\036\000\010\000\035\000\012\000\034\000\034\000\033\000\
\\036\000\122\000\039\000\032\000\042\000\031\000\043\000\030\000\
\\045\000\029\000\000\000\
\\001\000\003\000\040\000\004\000\039\000\005\000\038\000\006\000\037\000\
\\007\000\036\000\010\000\035\000\012\000\034\000\034\000\033\000\
\\037\000\182\000\039\000\032\000\042\000\031\000\043\000\030\000\
\\045\000\029\000\000\000\
\\001\000\007\000\184\000\033\000\184\000\038\000\184\000\000\000\
\\001\000\007\000\185\000\033\000\185\000\038\000\185\000\000\000\
\\001\000\007\000\087\000\000\000\
\\001\000\007\000\110\000\000\000\
\\001\000\007\000\133\000\037\000\091\000\000\000\
\\001\000\010\000\026\000\000\000\
\\001\000\011\000\000\000\000\000\
\\001\000\011\000\137\000\000\000\
\\001\000\011\000\139\000\041\000\139\000\000\000\
\\001\000\012\000\063\000\014\000\086\000\015\000\085\000\019\000\060\000\
\\020\000\059\000\026\000\058\000\000\000\
\\001\000\012\000\063\000\014\000\086\000\019\000\060\000\020\000\059\000\
\\026\000\058\000\000\000\
\\001\000\012\000\092\000\035\000\116\000\037\000\091\000\000\000\
\\001\000\012\000\092\000\037\000\091\000\000\000\
\\001\000\013\000\098\000\000\000\
\\001\000\013\000\112\000\000\000\
\\001\000\013\000\117\000\037\000\091\000\000\000\
\\001\000\014\000\050\000\000\000\
\\001\000\015\000\179\000\000\000\
\\001\000\015\000\186\000\035\000\106\000\000\000\
\\001\000\015\000\187\000\000\000\
\\001\000\015\000\188\000\035\000\188\000\000\000\
\\001\000\015\000\196\000\035\000\116\000\037\000\091\000\000\000\
\\001\000\015\000\197\000\000\000\
\\001\000\015\000\090\000\000\000\
\\001\000\015\000\104\000\000\000\
\\001\000\015\000\115\000\000\000\
\\001\000\015\000\126\000\000\000\
\\001\000\033\000\124\000\000\000\
\\001\000\035\000\116\000\037\000\091\000\000\000\
\\001\000\036\000\101\000\046\000\100\000\000\000\
\\001\000\037\000\183\000\000\000\
\\001\000\037\000\129\000\000\000\
\\001\000\038\000\081\000\000\000\
\\001\000\041\000\078\000\000\000\
\"
val actionRowNumbers =
"\023\000\070\000\021\000\000\000\
\\020\000\055\000\072\000\025\000\
\\023\000\025\000\025\000\025\000\
\\025\000\025\000\025\000\081\000\
\\026\000\027\000\022\000\010\000\
\\009\000\025\000\008\000\001\000\
\\023\000\007\000\006\000\025\000\
\\025\000\025\000\025\000\025\000\
\\030\000\025\000\025\000\025\000\
\\025\000\025\000\025\000\032\000\
\\098\000\035\000\037\000\061\000\
\\036\000\034\000\060\000\097\000\
\\074\000\067\000\028\000\081\000\
\\088\000\077\000\013\000\058\000\
\\017\000\018\000\019\000\011\000\
\\022\000\075\000\033\000\073\000\
\\046\000\047\000\054\000\048\000\
\\049\000\078\000\056\000\045\000\
\\040\000\039\000\041\000\038\000\
\\002\000\094\000\025\000\025\000\
\\089\000\029\000\083\000\065\000\
\\075\000\025\000\081\000\068\000\
\\004\000\075\000\079\000\025\000\
\\003\000\090\000\076\000\080\000\
\\042\000\031\000\024\000\043\000\
\\059\000\063\000\066\000\085\000\
\\075\000\093\000\050\000\092\000\
\\025\000\015\000\091\000\082\000\
\\057\000\014\000\075\000\016\000\
\\096\000\064\000\095\000\025\000\
\\005\000\084\000\075\000\051\000\
\\012\000\087\000\086\000\025\000\
\\053\000\069\000\062\000\025\000\
\\044\000\052\000\071\000"
val gotoT =
"\
\\001\000\134\000\002\000\006\000\003\000\005\000\004\000\004\000\
\\005\000\003\000\006\000\002\000\009\000\001\000\000\000\
\\000\000\
\\004\000\025\000\005\000\003\000\000\000\
\\000\000\
\\004\000\026\000\005\000\003\000\000\000\
\\000\000\
\\000\000\
\\003\000\039\000\004\000\004\000\005\000\003\000\006\000\002\000\000\000\
\\002\000\040\000\003\000\005\000\004\000\004\000\005\000\003\000\
\\006\000\002\000\009\000\001\000\000\000\
\\003\000\041\000\004\000\004\000\005\000\003\000\006\000\002\000\000\000\
\\003\000\042\000\004\000\004\000\005\000\003\000\006\000\002\000\000\000\
\\003\000\043\000\004\000\004\000\005\000\003\000\006\000\002\000\000\000\
\\003\000\044\000\004\000\004\000\005\000\003\000\006\000\002\000\000\000\
\\003\000\045\000\004\000\004\000\005\000\003\000\006\000\002\000\000\000\
\\003\000\046\000\004\000\004\000\005\000\003\000\006\000\002\000\000\000\
\\014\000\047\000\000\000\
\\000\000\
\\000\000\
\\003\000\055\000\004\000\004\000\005\000\003\000\006\000\002\000\
\\010\000\054\000\012\000\053\000\016\000\052\000\000\000\
\\000\000\
\\000\000\
\\003\000\062\000\004\000\004\000\005\000\003\000\006\000\002\000\000\000\
\\000\000\
\\000\000\
\\002\000\063\000\003\000\005\000\004\000\004\000\005\000\003\000\
\\006\000\002\000\009\000\001\000\000\000\
\\000\000\
\\000\000\
\\003\000\064\000\004\000\004\000\005\000\003\000\006\000\002\000\000\000\
\\003\000\065\000\004\000\004\000\005\000\003\000\006\000\002\000\000\000\
\\003\000\066\000\004\000\004\000\005\000\003\000\006\000\002\000\000\000\
\\003\000\067\000\004\000\004\000\005\000\003\000\006\000\002\000\000\000\
\\003\000\068\000\004\000\004\000\005\000\003\000\006\000\002\000\000\000\
\\000\000\
\\003\000\070\000\004\000\004\000\005\000\003\000\006\000\002\000\000\000\
\\003\000\071\000\004\000\004\000\005\000\003\000\006\000\002\000\000\000\
\\003\000\072\000\004\000\004\000\005\000\003\000\006\000\002\000\000\000\
\\003\000\073\000\004\000\004\000\005\000\003\000\006\000\002\000\000\000\
\\003\000\074\000\004\000\004\000\005\000\003\000\006\000\002\000\000\000\
\\003\000\075\000\004\000\004\000\005\000\003\000\006\000\002\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\010\000\054\000\011\000\082\000\012\000\081\000\015\000\080\000\000\000\
\\000\000\
\\000\000\
\\014\000\087\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\003\000\055\000\004\000\004\000\005\000\003\000\006\000\002\000\
\\010\000\054\000\012\000\094\000\013\000\093\000\016\000\052\000\000\000\
\\010\000\054\000\012\000\095\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\007\000\097\000\000\000\
\\003\000\100\000\004\000\004\000\005\000\003\000\006\000\002\000\000\000\
\\003\000\101\000\004\000\004\000\005\000\003\000\006\000\002\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\010\000\054\000\012\000\105\000\013\000\093\000\000\000\
\\003\000\106\000\004\000\004\000\005\000\003\000\006\000\002\000\000\000\
\\014\000\107\000\000\000\
\\000\000\
\\000\000\
\\010\000\054\000\012\000\109\000\000\000\
\\000\000\
\\003\000\112\000\004\000\004\000\005\000\003\000\006\000\002\000\
\\016\000\111\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\003\000\117\000\004\000\004\000\005\000\003\000\006\000\002\000\
\\008\000\116\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\010\000\054\000\011\000\082\000\012\000\081\000\015\000\121\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\003\000\123\000\004\000\004\000\005\000\003\000\006\000\002\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\010\000\054\000\012\000\126\000\013\000\125\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\003\000\128\000\004\000\004\000\005\000\003\000\006\000\002\000\000\000\
\\000\000\
\\000\000\
\\010\000\054\000\012\000\129\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\\000\000\
\\003\000\130\000\004\000\004\000\005\000\003\000\006\000\002\000\000\000\
\\000\000\
\\000\000\
\\007\000\132\000\000\000\
\\003\000\133\000\004\000\004\000\005\000\003\000\006\000\002\000\000\000\
\\000\000\
\\000\000\
\\000\000\
\"
val numstates = 135
val numrules = 61
val s = ref "" and index = ref 0
val string_to_int = fn () => 
let val i = !index
in index := i+2; Char.ord(String.sub(!s,i)) + Char.ord(String.sub(!s,i+1)) * 256
end
val string_to_list = fn s' =>
    let val len = String.size s'
        fun f () =
           if !index < len then string_to_int() :: f()
           else nil
   in index := 0; s := s'; f ()
   end
val string_to_pairlist = fn (conv_key,conv_entry) =>
     let fun f () =
         case string_to_int()
         of 0 => EMPTY
          | n => PAIR(conv_key (n-1),conv_entry (string_to_int()),f())
     in f
     end
val string_to_pairlist_default = fn (conv_key,conv_entry) =>
    let val conv_row = string_to_pairlist(conv_key,conv_entry)
    in fn () =>
       let val default = conv_entry(string_to_int())
           val row = conv_row()
       in (row,default)
       end
   end
val string_to_table = fn (convert_row,s') =>
    let val len = String.size s'
        fun f ()=
           if !index < len then convert_row() :: f()
           else nil
     in (s := s'; index := 0; f ())
     end
local
  val memo = Array.array(numstates+numrules,ERROR)
  val _ =let fun g i=(Array.update(memo,i,REDUCE(i-numstates)); g(i+1))
       fun f i =
            if i=numstates then g i
            else (Array.update(memo,i,SHIFT (STATE i)); f (i+1))
          in f 0 handle General.Subscript => ()
          end
in
val entry_to_action = fn 0 => ACCEPT | 1 => ERROR | j => Array.sub(memo,(j-2))
end
val gotoT=Array.fromList(string_to_table(string_to_pairlist(NT,STATE),gotoT))
val actionRows=string_to_table(string_to_pairlist_default(T,entry_to_action),actionRows)
val actionRowNumbers = string_to_list actionRowNumbers
val actionT = let val actionRowLookUp=
let val a=Array.fromList(actionRows) in fn i=>Array.sub(a,i) end
in Array.fromList(List.map actionRowLookUp actionRowNumbers)
end
in LrTable.mkLrTable {actions=actionT,gotos=gotoT,numRules=numrules,
numStates=numstates,initialState=STATE 0}
end
end
local open Header in
type pos = int
type arg = unit
structure MlyValue = 
struct
datatype svalue = VOID | ntVOID of unit ->  unit
 | NUM of unit ->  (int) | ID of unit ->  (string)
 | comps of unit ->  (expr list)
 | params of unit ->  ( ( plcType * string )  list)
 | args of unit ->  ( ( plcType * string )  list)
 | plctypes of unit ->  (plcType list) | plctype of unit ->  (plcType)
 | typed_var of unit ->  (plcType*string)
 | atomic_type of unit ->  (plcType) | decl of unit ->  (declaration)
 | cond_exp of unit ->  (expr option)
 | matchexp of unit ->  ( ( expr option * expr )  list)
 | app_exp of unit ->  (expr) | const_exp of unit ->  (expr)
 | atomic_expr of unit ->  (expr) | exp of unit ->  (expr)
 | statement of unit ->  (expr) | prog of unit ->  (expr)
end
type svalue = MlyValue.svalue
type result = expr
end
structure EC=
struct
open LrTable
infix 5 $$
fun x $$ y = y::x
val is_keyword =
fn _ => false
val preferred_change : (term list * term list) list = 
(nil
,nil
 $$ (T 2))::
(nil
,nil
 $$ (T 5))::
(nil
,nil
 $$ (T 3))::
(nil
,nil
 $$ (T 4))::
nil
val noShift = 
fn (T 10) => true | _ => false
val showTerminal =
fn (T 0) => "ID"
  | (T 1) => "NUM"
  | (T 2) => "PLUS"
  | (T 3) => "DIV"
  | (T 4) => "SUB"
  | (T 5) => "TIMES"
  | (T 6) => "EQUAL"
  | (T 7) => "TRUE"
  | (T 8) => "FALSE"
  | (T 9) => "SEMI"
  | (T 10) => "EOF"
  | (T 11) => "LSQBRA"
  | (T 12) => "RSQBRA"
  | (T 13) => "LPARENT"
  | (T 14) => "RPARENT"
  | (T 15) => "FUN"
  | (T 16) => "VAR"
  | (T 17) => "FN"
  | (T 18) => "BOOL"
  | (T 19) => "INT"
  | (T 20) => "ELSE"
  | (T 21) => "IF"
  | (T 22) => "HD"
  | (T 23) => "ISE"
  | (T 24) => "MATCH"
  | (T 25) => "NIL"
  | (T 26) => "PRINT"
  | (T 27) => "REC"
  | (T 28) => "THEN"
  | (T 29) => "TL"
  | (T 30) => "WITCH"
  | (T 31) => "UNDERSCORE"
  | (T 32) => "TWO_POINTS"
  | (T 33) => "DTWO_POINTS"
  | (T 34) => "COMMA"
  | (T 35) => "END"
  | (T 36) => "SARROW"
  | (T 37) => "DARROW"
  | (T 38) => "LESS"
  | (T 39) => "LBRA"
  | (T 40) => "RBRA"
  | (T 41) => "AND"
  | (T 42) => "LESSEQ"
  | (T 43) => "NOT"
  | (T 44) => "DIFF"
  | (T 45) => "PIPE"
  | _ => "bogus-term"
local open Header in
val errtermvalue=
fn _ => MlyValue.VOID
end
val terms : term list = nil
 $$ (T 45) $$ (T 44) $$ (T 43) $$ (T 42) $$ (T 41) $$ (T 40) $$ (T 39)
 $$ (T 38) $$ (T 37) $$ (T 36) $$ (T 35) $$ (T 34) $$ (T 33) $$ (T 32)
 $$ (T 31) $$ (T 30) $$ (T 29) $$ (T 28) $$ (T 27) $$ (T 26) $$ (T 25)
 $$ (T 24) $$ (T 23) $$ (T 22) $$ (T 21) $$ (T 20) $$ (T 19) $$ (T 18)
 $$ (T 17) $$ (T 16) $$ (T 15) $$ (T 14) $$ (T 13) $$ (T 12) $$ (T 11)
 $$ (T 10) $$ (T 9) $$ (T 8) $$ (T 7) $$ (T 6) $$ (T 5) $$ (T 4) $$ 
(T 3) $$ (T 2)end
structure Actions =
struct 
exception mlyAction of int
local open Header in
val actions = 
fn (i392,defaultPos,stack,
    (()):arg) =>
case (i392,stack)
of  ( 0, ( ( _, ( MlyValue.statement statement1, statement1left, 
statement1right)) :: rest671)) => let val  result = MlyValue.prog (fn
 _ => let val  (statement as statement1) = statement1 ()
 in (statement)
end)
 in ( LrTable.NT 0, ( result, statement1left, statement1right), 
rest671)
end
|  ( 1, ( ( _, ( MlyValue.exp exp1, exp1left, exp1right)) :: rest671))
 => let val  result = MlyValue.statement (fn _ => let val  (exp as 
exp1) = exp1 ()
 in (exp)
end)
 in ( LrTable.NT 1, ( result, exp1left, exp1right), rest671)
end
|  ( 2, ( ( _, ( MlyValue.statement statement1, _, statement1right))
 :: _ :: ( _, ( MlyValue.decl decl1, decl1left, _)) :: rest671)) =>
 let val  result = MlyValue.statement (fn _ => let val  (decl as decl1
) = decl1 ()
 val  (statement as statement1) = statement1 ()
 in (resolve (decl, statement))
end)
 in ( LrTable.NT 1, ( result, decl1left, statement1right), rest671)

end
|  ( 3, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.ID ID1, _, _)) :: ( _, ( _, VAR1left, _)) :: rest671)) => let
 val  result = MlyValue.decl (fn _ => let val  (ID as ID1) = ID1 ()
 val  (exp as exp1) = exp1 ()
 in (Variable(ID, exp))
end)
 in ( LrTable.NT 8, ( result, VAR1left, exp1right), rest671)
end
|  ( 4, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.args args1, _, _)) :: ( _, ( MlyValue.ID ID1, _, _)) :: ( _, 
( _, FUN1left, _)) :: rest671)) => let val  result = MlyValue.decl (fn
 _ => let val  (ID as ID1) = ID1 ()
 val  (args as args1) = args1 ()
 val  (exp as exp1) = exp1 ()
 in (Function(ID, makeAnon(args, exp)))
end)
 in ( LrTable.NT 8, ( result, FUN1left, exp1right), rest671)
end
|  ( 5, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: _ :: ( _, ( 
MlyValue.plctype plctype1, _, _)) :: _ :: ( _, ( MlyValue.args args1,
 _, _)) :: ( _, ( MlyValue.ID ID1, _, _)) :: _ :: ( _, ( _, FUN1left,
 _)) :: rest671)) => let val  result = MlyValue.decl (fn _ => let val 
 (ID as ID1) = ID1 ()
 val  (args as args1) = args1 ()
 val  (plctype as plctype1) = plctype1 ()
 val  (exp as exp1) = exp1 ()
 in (RecursiveFunction(ID, args, plctype, exp))
end)
 in ( LrTable.NT 8, ( result, FUN1left, exp1right), rest671)
end
|  ( 6, ( ( _, ( MlyValue.atomic_expr atomic_expr1, atomic_expr1left, 
atomic_expr1right)) :: rest671)) => let val  result = MlyValue.exp (fn
 _ => let val  (atomic_expr as atomic_expr1) = atomic_expr1 ()
 in (atomic_expr)
end)
 in ( LrTable.NT 2, ( result, atomic_expr1left, atomic_expr1right), 
rest671)
end
|  ( 7, ( ( _, ( MlyValue.app_exp app_exp1, app_exp1left, 
app_exp1right)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  (app_exp as app_exp1) = app_exp1 ()
 in (app_exp)
end)
 in ( LrTable.NT 2, ( result, app_exp1left, app_exp1right), rest671)

end
|  ( 8, ( ( _, ( MlyValue.exp exp3, _, exp3right)) :: _ :: ( _, ( 
MlyValue.exp exp2, _, _)) :: _ :: ( _, ( MlyValue.exp exp1, _, _)) :: 
( _, ( _, IF1left, _)) :: rest671)) => let val  result = MlyValue.exp
 (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 val  exp3 = exp3 ()
 in (If(exp1, exp2, exp3))
end)
 in ( LrTable.NT 2, ( result, IF1left, exp3right), rest671)
end
|  ( 9, ( ( _, ( MlyValue.matchexp matchexp1, _, matchexp1right)) :: _
 :: ( _, ( MlyValue.exp exp1, _, _)) :: ( _, ( _, MATCH1left, _)) :: 
rest671)) => let val  result = MlyValue.exp (fn _ => let val  (exp as 
exp1) = exp1 ()
 val  (matchexp as matchexp1) = matchexp1 ()
 in (Match(exp, matchexp))
end)
 in ( LrTable.NT 2, ( result, MATCH1left, matchexp1right), rest671)

end
|  ( 10, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: ( _, ( _, 
NOT1left, _)) :: rest671)) => let val  result = MlyValue.exp (fn _ =>
 let val  (exp as exp1) = exp1 ()
 in (Prim1("!", exp))
end)
 in ( LrTable.NT 2, ( result, NOT1left, exp1right), rest671)
end
|  ( 11, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: ( _, ( _, 
SUB1left, _)) :: rest671)) => let val  result = MlyValue.exp (fn _ =>
 let val  (exp as exp1) = exp1 ()
 in (Prim1("-", exp))
end)
 in ( LrTable.NT 2, ( result, SUB1left, exp1right), rest671)
end
|  ( 12, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: ( _, ( _, 
HD1left, _)) :: rest671)) => let val  result = MlyValue.exp (fn _ =>
 let val  (exp as exp1) = exp1 ()
 in (Prim1("hd", exp))
end)
 in ( LrTable.NT 2, ( result, HD1left, exp1right), rest671)
end
|  ( 13, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: ( _, ( _, 
TL1left, _)) :: rest671)) => let val  result = MlyValue.exp (fn _ =>
 let val  (exp as exp1) = exp1 ()
 in (Prim1("tl", exp))
end)
 in ( LrTable.NT 2, ( result, TL1left, exp1right), rest671)
end
|  ( 14, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: ( _, ( _, 
ISE1left, _)) :: rest671)) => let val  result = MlyValue.exp (fn _ =>
 let val  (exp as exp1) = exp1 ()
 in (Prim1("ise", exp))
end)
 in ( LrTable.NT 2, ( result, ISE1left, exp1right), rest671)
end
|  ( 15, ( ( _, ( MlyValue.exp exp1, _, exp1right)) :: ( _, ( _, 
PRINT1left, _)) :: rest671)) => let val  result = MlyValue.exp (fn _
 => let val  (exp as exp1) = exp1 ()
 in (Prim1("print", exp))
end)
 in ( LrTable.NT 2, ( result, PRINT1left, exp1right), rest671)
end
|  ( 16, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (Prim2("&&", exp1, exp2))
end)
 in ( LrTable.NT 2, ( result, exp1left, exp2right), rest671)
end
|  ( 17, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (Prim2("+", exp1, exp2))
end)
 in ( LrTable.NT 2, ( result, exp1left, exp2right), rest671)
end
|  ( 18, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (Prim2("-", exp1, exp2))
end)
 in ( LrTable.NT 2, ( result, exp1left, exp2right), rest671)
end
|  ( 19, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (Prim2("*", exp1, exp2))
end)
 in ( LrTable.NT 2, ( result, exp1left, exp2right), rest671)
end
|  ( 20, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (Prim2("/", exp1, exp2))
end)
 in ( LrTable.NT 2, ( result, exp1left, exp2right), rest671)
end
|  ( 21, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (Prim2("=", exp1, exp2))
end)
 in ( LrTable.NT 2, ( result, exp1left, exp2right), rest671)
end
|  ( 22, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (Prim2("!=", exp1, exp2))
end)
 in ( LrTable.NT 2, ( result, exp1left, exp2right), rest671)
end
|  ( 23, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (Prim2("<=", exp1, exp2))
end)
 in ( LrTable.NT 2, ( result, exp1left, exp2right), rest671)
end
|  ( 24, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (Prim2("<", exp1, exp2))
end)
 in ( LrTable.NT 2, ( result, exp1left, exp2right), rest671)
end
|  ( 25, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (Prim2("::", exp1, exp2))
end)
 in ( LrTable.NT 2, ( result, exp1left, exp2right), rest671)
end
|  ( 26, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.exp (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in (Prim2(";", exp1, exp2))
end)
 in ( LrTable.NT 2, ( result, exp1left, exp2right), rest671)
end
|  ( 27, ( ( _, ( _, _, RSQBRA1right)) :: ( _, ( MlyValue.NUM NUM1, _,
 _)) :: _ :: ( _, ( MlyValue.exp exp1, exp1left, _)) :: rest671)) =>
 let val  result = MlyValue.exp (fn _ => let val  (exp as exp1) = exp1
 ()
 val  (NUM as NUM1) = NUM1 ()
 in (Item(NUM, exp))
end)
 in ( LrTable.NT 2, ( result, exp1left, RSQBRA1right), rest671)
end
|  ( 28, ( ( _, ( MlyValue.const_exp const_exp1, const_exp1left, 
const_exp1right)) :: rest671)) => let val  result = 
MlyValue.atomic_expr (fn _ => let val  (const_exp as const_exp1) = 
const_exp1 ()
 in (const_exp)
end)
 in ( LrTable.NT 3, ( result, const_exp1left, const_exp1right), 
rest671)
end
|  ( 29, ( ( _, ( MlyValue.ID ID1, ID1left, ID1right)) :: rest671)) =>
 let val  result = MlyValue.atomic_expr (fn _ => let val  (ID as ID1)
 = ID1 ()
 in (Var(ID))
end)
 in ( LrTable.NT 3, ( result, ID1left, ID1right), rest671)
end
|  ( 30, ( ( _, ( _, _, RBRA1right)) :: ( _, ( MlyValue.statement 
statement1, _, _)) :: ( _, ( _, LBRA1left, _)) :: rest671)) => let
 val  result = MlyValue.atomic_expr (fn _ => let val  (statement as 
statement1) = statement1 ()
 in (statement)
end)
 in ( LrTable.NT 3, ( result, LBRA1left, RBRA1right), rest671)
end
|  ( 31, ( ( _, ( _, _, RPARENT1right)) :: ( _, ( MlyValue.exp exp1, _
, _)) :: ( _, ( _, LPARENT1left, _)) :: rest671)) => let val  result =
 MlyValue.atomic_expr (fn _ => let val  (exp as exp1) = exp1 ()
 in (exp)
end)
 in ( LrTable.NT 3, ( result, LPARENT1left, RPARENT1right), rest671)

end
|  ( 32, ( ( _, ( _, _, RPARENT1right)) :: ( _, ( MlyValue.comps 
comps1, _, _)) :: ( _, ( _, LPARENT1left, _)) :: rest671)) => let val 
 result = MlyValue.atomic_expr (fn _ => let val  (comps as comps1) = 
comps1 ()
 in (List comps)
end)
 in ( LrTable.NT 3, ( result, LPARENT1left, RPARENT1right), rest671)

end
|  ( 33, ( ( _, ( _, _, END1right)) :: ( _, ( MlyValue.exp exp1, _, _)
) :: _ :: ( _, ( MlyValue.args args1, _, _)) :: ( _, ( _, FN1left, _))
 :: rest671)) => let val  result = MlyValue.atomic_expr (fn _ => let
 val  (args as args1) = args1 ()
 val  (exp as exp1) = exp1 ()
 in (makeAnon(args, exp))
end)
 in ( LrTable.NT 3, ( result, FN1left, END1right), rest671)
end
|  ( 34, ( ( _, ( MlyValue.atomic_expr atomic_expr2, _, 
atomic_expr2right)) :: ( _, ( MlyValue.atomic_expr atomic_expr1, 
atomic_expr1left, _)) :: rest671)) => let val  result = 
MlyValue.app_exp (fn _ => let val  atomic_expr1 = atomic_expr1 ()
 val  atomic_expr2 = atomic_expr2 ()
 in (Call(atomic_expr1, atomic_expr2))
end)
 in ( LrTable.NT 5, ( result, atomic_expr1left, atomic_expr2right), 
rest671)
end
|  ( 35, ( ( _, ( MlyValue.atomic_expr atomic_expr1, _, 
atomic_expr1right)) :: ( _, ( MlyValue.app_exp app_exp1, app_exp1left,
 _)) :: rest671)) => let val  result = MlyValue.app_exp (fn _ => let
 val  app_exp1 = app_exp1 ()
 val  (atomic_expr as atomic_expr1) = atomic_expr1 ()
 in (Call(atomic_expr, atomic_expr))
end)
 in ( LrTable.NT 5, ( result, app_exp1left, atomic_expr1right), 
rest671)
end
|  ( 36, ( ( _, ( MlyValue.NUM NUM1, NUM1left, NUM1right)) :: rest671)
) => let val  result = MlyValue.const_exp (fn _ => let val  (NUM as 
NUM1) = NUM1 ()
 in (ConI(NUM))
end)
 in ( LrTable.NT 4, ( result, NUM1left, NUM1right), rest671)
end
|  ( 37, ( ( _, ( _, TRUE1left, TRUE1right)) :: rest671)) => let val  
result = MlyValue.const_exp (fn _ => (ConB(true)))
 in ( LrTable.NT 4, ( result, TRUE1left, TRUE1right), rest671)
end
|  ( 38, ( ( _, ( _, FALSE1left, FALSE1right)) :: rest671)) => let
 val  result = MlyValue.const_exp (fn _ => (ConB(false)))
 in ( LrTable.NT 4, ( result, FALSE1left, FALSE1right), rest671)
end
|  ( 39, ( ( _, ( _, _, RPARENT1right)) :: ( _, ( _, LPARENT1left, _))
 :: rest671)) => let val  result = MlyValue.const_exp (fn _ => (
List []))
 in ( LrTable.NT 4, ( result, LPARENT1left, RPARENT1right), rest671)

end
|  ( 40, ( ( _, ( _, _, RPARENT1right)) :: _ :: _ :: ( _, ( 
MlyValue.plctype plctype1, _, _)) :: ( _, ( _, LPARENT1left, _)) :: 
rest671)) => let val  result = MlyValue.const_exp (fn _ => let val  (
plctype as plctype1) = plctype1 ()
 in (ESeq plctype)
end)
 in ( LrTable.NT 4, ( result, LPARENT1left, RPARENT1right), rest671)

end
|  ( 41, ( ( _, ( MlyValue.exp exp2, _, exp2right)) :: _ :: ( _, ( 
MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.comps (fn _ => let val  exp1 = exp1 ()
 val  exp2 = exp2 ()
 in ([exp1, exp2])
end)
 in ( LrTable.NT 15, ( result, exp1left, exp2right), rest671)
end
|  ( 42, ( ( _, ( MlyValue.comps comps1, _, comps1right)) :: _ :: ( _,
 ( MlyValue.exp exp1, exp1left, _)) :: rest671)) => let val  result = 
MlyValue.comps (fn _ => let val  (exp as exp1) = exp1 ()
 val  (comps as comps1) = comps1 ()
 in ([exp] @ comps)
end)
 in ( LrTable.NT 15, ( result, exp1left, comps1right), rest671)
end
|  ( 43, ( ( _, ( _, END1left, END1right)) :: rest671)) => let val  
result = MlyValue.matchexp (fn _ => ([]))
 in ( LrTable.NT 6, ( result, END1left, END1right), rest671)
end
|  ( 44, ( ( _, ( MlyValue.matchexp matchexp1, _, matchexp1right)) :: 
( _, ( MlyValue.exp exp1, _, _)) :: _ :: ( _, ( MlyValue.cond_exp 
cond_exp1, _, _)) :: ( _, ( _, PIPE1left, _)) :: rest671)) => let val 
 result = MlyValue.matchexp (fn _ => let val  (cond_exp as cond_exp1)
 = cond_exp1 ()
 val  (exp as exp1) = exp1 ()
 val  (matchexp as matchexp1) = matchexp1 ()
 in ([(cond_exp, exp)] @ matchexp)
end)
 in ( LrTable.NT 6, ( result, PIPE1left, matchexp1right), rest671)
end
|  ( 45, ( ( _, ( MlyValue.exp exp1, exp1left, exp1right)) :: rest671)
) => let val  result = MlyValue.cond_exp (fn _ => let val  (exp as 
exp1) = exp1 ()
 in (SOME exp)
end)
 in ( LrTable.NT 7, ( result, exp1left, exp1right), rest671)
end
|  ( 46, ( ( _, ( _, UNDERSCORE1left, UNDERSCORE1right)) :: rest671))
 => let val  result = MlyValue.cond_exp (fn _ => (NONE))
 in ( LrTable.NT 7, ( result, UNDERSCORE1left, UNDERSCORE1right), 
rest671)
end
|  ( 47, ( ( _, ( _, _, RPARENT1right)) :: ( _, ( _, LPARENT1left, _))
 :: rest671)) => let val  result = MlyValue.args (fn _ => ([]))
 in ( LrTable.NT 13, ( result, LPARENT1left, RPARENT1right), rest671)

end
|  ( 48, ( ( _, ( _, _, RPARENT1right)) :: ( _, ( MlyValue.params 
params1, _, _)) :: ( _, ( _, LPARENT1left, _)) :: rest671)) => let
 val  result = MlyValue.args (fn _ => let val  (params as params1) = 
params1 ()
 in (params)
end)
 in ( LrTable.NT 13, ( result, LPARENT1left, RPARENT1right), rest671)

end
|  ( 49, ( ( _, ( MlyValue.typed_var typed_var1, typed_var1left, 
typed_var1right)) :: rest671)) => let val  result = MlyValue.params
 (fn _ => let val  (typed_var as typed_var1) = typed_var1 ()
 in ([typed_var])
end)
 in ( LrTable.NT 14, ( result, typed_var1left, typed_var1right), 
rest671)
end
|  ( 50, ( ( _, ( MlyValue.params params1, _, params1right)) :: _ :: (
 _, ( MlyValue.typed_var typed_var1, typed_var1left, _)) :: rest671))
 => let val  result = MlyValue.params (fn _ => let val  (typed_var as 
typed_var1) = typed_var1 ()
 val  (params as params1) = params1 ()
 in ([typed_var] @ params)
end)
 in ( LrTable.NT 14, ( result, typed_var1left, params1right), rest671)

end
|  ( 51, ( ( _, ( MlyValue.ID ID1, _, ID1right)) :: ( _, ( 
MlyValue.plctype plctype1, plctype1left, _)) :: rest671)) => let val  
result = MlyValue.typed_var (fn _ => let val  (plctype as plctype1) = 
plctype1 ()
 val  (ID as ID1) = ID1 ()
 in ((plctype, ID))
end)
 in ( LrTable.NT 10, ( result, plctype1left, ID1right), rest671)
end
|  ( 52, ( ( _, ( MlyValue.atomic_type atomic_type1, atomic_type1left,
 atomic_type1right)) :: rest671)) => let val  result = 
MlyValue.plctype (fn _ => let val  (atomic_type as atomic_type1) = 
atomic_type1 ()
 in (atomic_type)
end)
 in ( LrTable.NT 11, ( result, atomic_type1left, atomic_type1right), 
rest671)
end
|  ( 53, ( ( _, ( _, _, RPARENT1right)) :: ( _, ( MlyValue.plctypes 
plctypes1, _, _)) :: ( _, ( _, LPARENT1left, _)) :: rest671)) => let
 val  result = MlyValue.plctype (fn _ => let val  (plctypes as 
plctypes1) = plctypes1 ()
 in (ListT(plctypes))
end)
 in ( LrTable.NT 11, ( result, LPARENT1left, RPARENT1right), rest671)

end
|  ( 54, ( ( _, ( MlyValue.plctype plctype2, _, plctype2right)) :: _
 :: ( _, ( MlyValue.plctype plctype1, plctype1left, _)) :: rest671))
 => let val  result = MlyValue.plctype (fn _ => let val  plctype1 = 
plctype1 ()
 val  plctype2 = plctype2 ()
 in (FunT(plctype1, plctype2))
end)
 in ( LrTable.NT 11, ( result, plctype1left, plctype2right), rest671)

end
|  ( 55, ( ( _, ( _, _, RSQBRA1right)) :: ( _, ( MlyValue.plctype 
plctype1, _, _)) :: ( _, ( _, LSQBRA1left, _)) :: rest671)) => let
 val  result = MlyValue.plctype (fn _ => let val  (plctype as plctype1
) = plctype1 ()
 in (SeqT(plctype))
end)
 in ( LrTable.NT 11, ( result, LSQBRA1left, RSQBRA1right), rest671)

end
|  ( 56, ( ( _, ( _, NIL1left, NIL1right)) :: rest671)) => let val  
result = MlyValue.atomic_type (fn _ => (ListT []))
 in ( LrTable.NT 9, ( result, NIL1left, NIL1right), rest671)
end
|  ( 57, ( ( _, ( _, INT1left, INT1right)) :: rest671)) => let val  
result = MlyValue.atomic_type (fn _ => (IntT))
 in ( LrTable.NT 9, ( result, INT1left, INT1right), rest671)
end
|  ( 58, ( ( _, ( _, BOOL1left, BOOL1right)) :: rest671)) => let val  
result = MlyValue.atomic_type (fn _ => (BoolT))
 in ( LrTable.NT 9, ( result, BOOL1left, BOOL1right), rest671)
end
|  ( 59, ( ( _, ( MlyValue.plctype plctype2, _, plctype2right)) :: _
 :: ( _, ( MlyValue.plctype plctype1, plctype1left, _)) :: rest671))
 => let val  result = MlyValue.plctypes (fn _ => let val  plctype1 = 
plctype1 ()
 val  plctype2 = plctype2 ()
 in ([plctype1, plctype2])
end)
 in ( LrTable.NT 12, ( result, plctype1left, plctype2right), rest671)

end
|  ( 60, ( ( _, ( MlyValue.plctypes plctypes1, _, plctypes1right)) ::
 _ :: ( _, ( MlyValue.plctype plctype1, plctype1left, _)) :: rest671))
 => let val  result = MlyValue.plctypes (fn _ => let val  plctype1 = 
plctype1 ()
 val  (plctypes as plctypes1) = plctypes1 ()
 in ([plctype1] @ plctypes)
end)
 in ( LrTable.NT 12, ( result, plctype1left, plctypes1right), rest671)

end
| _ => raise (mlyAction i392)
end
val void = MlyValue.VOID
val extract = fn a => (fn MlyValue.prog x => x
| _ => let exception ParseInternal
	in raise ParseInternal end) a ()
end
end
structure Tokens : PlcParser_TOKENS =
struct
type svalue = ParserData.svalue
type ('a,'b) token = ('a,'b) Token.token
fun ID (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 0,(
ParserData.MlyValue.ID (fn () => i),p1,p2))
fun NUM (i,p1,p2) = Token.TOKEN (ParserData.LrTable.T 1,(
ParserData.MlyValue.NUM (fn () => i),p1,p2))
fun PLUS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 2,(
ParserData.MlyValue.VOID,p1,p2))
fun DIV (p1,p2) = Token.TOKEN (ParserData.LrTable.T 3,(
ParserData.MlyValue.VOID,p1,p2))
fun SUB (p1,p2) = Token.TOKEN (ParserData.LrTable.T 4,(
ParserData.MlyValue.VOID,p1,p2))
fun TIMES (p1,p2) = Token.TOKEN (ParserData.LrTable.T 5,(
ParserData.MlyValue.VOID,p1,p2))
fun EQUAL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 6,(
ParserData.MlyValue.VOID,p1,p2))
fun TRUE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 7,(
ParserData.MlyValue.VOID,p1,p2))
fun FALSE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 8,(
ParserData.MlyValue.VOID,p1,p2))
fun SEMI (p1,p2) = Token.TOKEN (ParserData.LrTable.T 9,(
ParserData.MlyValue.VOID,p1,p2))
fun EOF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 10,(
ParserData.MlyValue.VOID,p1,p2))
fun LSQBRA (p1,p2) = Token.TOKEN (ParserData.LrTable.T 11,(
ParserData.MlyValue.VOID,p1,p2))
fun RSQBRA (p1,p2) = Token.TOKEN (ParserData.LrTable.T 12,(
ParserData.MlyValue.VOID,p1,p2))
fun LPARENT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 13,(
ParserData.MlyValue.VOID,p1,p2))
fun RPARENT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 14,(
ParserData.MlyValue.VOID,p1,p2))
fun FUN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 15,(
ParserData.MlyValue.VOID,p1,p2))
fun VAR (p1,p2) = Token.TOKEN (ParserData.LrTable.T 16,(
ParserData.MlyValue.VOID,p1,p2))
fun FN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 17,(
ParserData.MlyValue.VOID,p1,p2))
fun BOOL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 18,(
ParserData.MlyValue.VOID,p1,p2))
fun INT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 19,(
ParserData.MlyValue.VOID,p1,p2))
fun ELSE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 20,(
ParserData.MlyValue.VOID,p1,p2))
fun IF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 21,(
ParserData.MlyValue.VOID,p1,p2))
fun HD (p1,p2) = Token.TOKEN (ParserData.LrTable.T 22,(
ParserData.MlyValue.VOID,p1,p2))
fun ISE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 23,(
ParserData.MlyValue.VOID,p1,p2))
fun MATCH (p1,p2) = Token.TOKEN (ParserData.LrTable.T 24,(
ParserData.MlyValue.VOID,p1,p2))
fun NIL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 25,(
ParserData.MlyValue.VOID,p1,p2))
fun PRINT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 26,(
ParserData.MlyValue.VOID,p1,p2))
fun REC (p1,p2) = Token.TOKEN (ParserData.LrTable.T 27,(
ParserData.MlyValue.VOID,p1,p2))
fun THEN (p1,p2) = Token.TOKEN (ParserData.LrTable.T 28,(
ParserData.MlyValue.VOID,p1,p2))
fun TL (p1,p2) = Token.TOKEN (ParserData.LrTable.T 29,(
ParserData.MlyValue.VOID,p1,p2))
fun WITCH (p1,p2) = Token.TOKEN (ParserData.LrTable.T 30,(
ParserData.MlyValue.VOID,p1,p2))
fun UNDERSCORE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 31,(
ParserData.MlyValue.VOID,p1,p2))
fun TWO_POINTS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 32,(
ParserData.MlyValue.VOID,p1,p2))
fun DTWO_POINTS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 33,(
ParserData.MlyValue.VOID,p1,p2))
fun COMMA (p1,p2) = Token.TOKEN (ParserData.LrTable.T 34,(
ParserData.MlyValue.VOID,p1,p2))
fun END (p1,p2) = Token.TOKEN (ParserData.LrTable.T 35,(
ParserData.MlyValue.VOID,p1,p2))
fun SARROW (p1,p2) = Token.TOKEN (ParserData.LrTable.T 36,(
ParserData.MlyValue.VOID,p1,p2))
fun DARROW (p1,p2) = Token.TOKEN (ParserData.LrTable.T 37,(
ParserData.MlyValue.VOID,p1,p2))
fun LESS (p1,p2) = Token.TOKEN (ParserData.LrTable.T 38,(
ParserData.MlyValue.VOID,p1,p2))
fun LBRA (p1,p2) = Token.TOKEN (ParserData.LrTable.T 39,(
ParserData.MlyValue.VOID,p1,p2))
fun RBRA (p1,p2) = Token.TOKEN (ParserData.LrTable.T 40,(
ParserData.MlyValue.VOID,p1,p2))
fun AND (p1,p2) = Token.TOKEN (ParserData.LrTable.T 41,(
ParserData.MlyValue.VOID,p1,p2))
fun LESSEQ (p1,p2) = Token.TOKEN (ParserData.LrTable.T 42,(
ParserData.MlyValue.VOID,p1,p2))
fun NOT (p1,p2) = Token.TOKEN (ParserData.LrTable.T 43,(
ParserData.MlyValue.VOID,p1,p2))
fun DIFF (p1,p2) = Token.TOKEN (ParserData.LrTable.T 44,(
ParserData.MlyValue.VOID,p1,p2))
fun PIPE (p1,p2) = Token.TOKEN (ParserData.LrTable.T 45,(
ParserData.MlyValue.VOID,p1,p2))
end
end
